import threading

import cherrypy
import gitlab
from gitlab import Gitlab
from telebot import types

from bot import config, WebhookServer
from bot.merger_bot import bot, db, decoder, encoder, timer

cherrypy.tree.mount(WebhookServer(), '/')

if __name__ == '__main__':
    # –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    cherrypy.config.update({
        'server.socket_host'    : config.WEBHOOK_HOST,
        'server.socket_port'    : config.WEBHOOK_PORT,
        'server.ssl_module'     : 'builtin',
        'server.ssl_certificate': config.WEBHOOK_SSL_CERT,
        'server.ssl_private_key': config.WEBHOOK_SSL_PRIV,
    })

    # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
    server_thread = threading.Thread(target=cherrypy.quickstart, args=(WebhookServer(),))
    bot_thread = threading.Thread(target=bot.polling)
    server_thread.start()
    bot_thread.start()


@bot.message_handler(commands=['start'])
def send_welcome(message):
    if (message.chat.username is None) and (db.token.count_documents({"id": encoder(str(message.chat.id))}) == 0):
        inline_item2 = types.InlineKeyboardButton('–°–æ–∑–¥–∞–Ω–∏–µ Username', url='https://telegram-rus.ru/nik')
        inline_bt2 = types.InlineKeyboardMarkup()
        inline_bt2.add(inline_item2)

        bot.send_message(message.chat.id,
                         "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, "
                         "–º–Ω–µ –ø—Ä–∏—è—Ç–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ª—é–¥—è–º –ø–æ –Ω–∏–∫–∞–º, –∞ –Ω–µ id. "
                         "–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º. "
                         "–ù–æ –µ—Å–ª–∏ —Ç–µ–±—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, —è –Ω–µ –Ω–∞—Å—Ç–∞–∏–≤–∞—é, –º–æ–µ–π —Ä–∞–±–æ—Ç–µ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç ü§î",
                         parse_mode="html", reply_markup=inline_bt2)

    if message.chat.username is None:
        name_user = str(message.chat.id)
    else:
        name_user = "@" + message.chat.username

    st = open('./static/privet.webp', 'rb')
    bot.send_sticker(message.chat.id, st)

    if 5 <= timer[3] < 11:
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ , " + name_user +
                         "! –ö–∞–∫–∞—è –∂–µ —Ç—ã —Ä–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞, –∞ —è –≤–µ–¥—å –º–æ–≥ –∏ —Å–ø–∞—Ç—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è üòÖ",
                         parse_mode="html")

    if 11 <= timer[3] < 17:
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, " + name_user +
                         "! –ö–∞–∫ –∂–µ —Ç—ã –≤–æ–≤—Ä–µ–º—è —è —Ç–æ–ª—å–∫–æ –≤–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—É—Å–∞ ü•ò –ê —Ç—ã –ø–æ–∫—É—à–∞–ª?",
                         parse_mode="html")

    if 17 <= timer[3] < 23:
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, " + name_user +
                         "! –û–≥–æ —É–∂–µ –≤–µ—á–µ—Ä, —Ç—ã –¥–æ–º–æ–π —Ç–æ –Ω–µ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è? üåÖ",
                         parse_mode="html")

    if (timer[3] == 23) or (0 <= timer[3] < 5):
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä–æ–π –Ω–æ—á–∏... –¥–æ–±—Ä–∞—è –Ω–æ—á—å... –≤ –æ–±—â–µ–º, –ø—Ä–∏–≤–µ—Ç, " + name_user +
                         "! –¢—ã —á–µ–≥–æ –Ω–µ —Å–ø–∏—à—å, –¥–∞–≤–∞–π –Ω–µ –∑–∞—Å–∏–∂–∏–≤–∞–π—Å—è, —Å–ø–∞—Ç—å - –ø–æ–ª–µ–∑–Ω–æ üò¥",
                         parse_mode="html")

    if db.token.count_documents({"id": encoder(str(message.chat.id))}) == 1:
        cursor = db.token.find_one({"id": encoder(str(message.chat.id))})
        cur = []
        cursor1 = dict(cursor)
        for j in cursor1['token']:
            cur.append(decoder(j))
        token_string = '\n'.join(cur)

        if cur:
            bot.send_message(message.chat.id,
                             "–ü–æ —Ç–≤–æ–µ–º—É id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —è –Ω–∞—à–µ–ª —Å–ª–µ–¥—É—é—â–∏–µ TOKEN:\n" + token_string,
                             parse_mode="html")

            item1 = types.KeyboardButton("–í–≤–æ–¥ TOKEN")
            item2 = types.KeyboardButton("–í—ã–±–æ—Ä TOKEN")
            item3 = types.KeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ TOKEN")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)

            bot.send_message(message.chat.id,
                             "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å TOKEN, –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –∏–∑ —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è - "
                             "–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–æ—á–∫–∏ ",
                             parse_mode="html",
                             reply_markup=markup)

            bot.register_next_step_handler(message, process_step_1)

        elif not cur:
            item1 = types.KeyboardButton("–í–≤–æ–¥ TOKEN")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(item1)

            bot.send_message(message.chat.id,
                             name_user + ", –ø–æ —Ç–≤–æ–µ–º—É id –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ TOKEN. "
                                         "–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É",
                             parse_mode="html", reply_markup=markup)

            bot.register_next_step_handler(message, process_step_1)

    elif db.token.count_documents({"id": encoder(str(message.chat.id))}) > 1:
        bot.send_message(message.chat.id,
                         "–ü–æ —Ç–≤–æ–µ–º—É id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —è –Ω–∞—à–µ–ª –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è! "
                         "–≠—Ç–æ –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ —Ç–≤–æ–µ–π –≤–∏–Ω—ã –∑–¥–µ—Å—å –Ω–µ—Ç. "
                         "–ù–∞–ø–∏—à–∏ /problem –∏ –æ–ø–∏—à–∏ —ç—Ç–æ—Ç —Å–ª—É—á–∞–π "
                         "(–º–æ–∂–µ—à—å –ø–µ—Ä–µ–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è). –ò–∑–≤–∏–Ω–∏ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ üò¨",
                         parse_mode="html")

    elif db.token.count_documents({"id": encoder(str(message.chat.id))}) == 0:
        db.token.insert_one({"id": encoder(str(message.chat.id)), "token": [], "idGitLab": []})

        inline_item1 = types.InlineKeyboardButton('–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å TOKEN',
                                                  url='https://habr.com/ru/company/flant/blog/340996/')
        inline_bt1 = types.InlineKeyboardMarkup()
        inline_bt1.add(inline_item1)

        item1 = types.KeyboardButton("–í–≤–æ–¥ TOKEN")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(item1)

        bot.send_message(message.chat.id,
                         name_user + ", —Ç—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ, —Ç–≤–æ–π id –±—ã–ª —É–¥–∞—á–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                         parse_mode="html", reply_markup=markup)

        bot.send_message(message.chat.id,
                         "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º TOKEN. –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å, –≥–¥–µ –µ–≥–æ –Ω–∞–π—Ç–∏, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É ",
                         parse_mode="html", reply_markup=inline_bt1)

        bot.register_next_step_handler(message, process_step_1)


def process_step_1(message):
    if message.text == '–í–≤–æ–¥ TOKEN':
        bot.register_next_step_handler(message, process_step_2)
    elif message.text == '–í—ã–±–æ—Ä TOKEN':
        cursor3 = db.token.find_one({"id": encoder(str(message.chat.id))})
        cur = []
        cursor4 = dict(cursor3)
        for j in cursor4["token"]:
            cur.append(decoder(j))

        bot.send_message(message.chat.id,
                         "–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º, –∫–∞–∫–æ–π TOKEN –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö TOKEN:\n" + '\n'.join(cur),
                         parse_mode="html", reply_markup=types.ReplyKeyboardRemove())

        bot.register_next_step_handler(message, process_step_4)
    elif message.text == '–£–¥–∞–ª–µ–Ω–∏–µ TOKEN':
        cursor3 = db.token.find_one({"id": encoder(str(message.chat.id))})
        cur = []
        cursor4 = dict(cursor3)
        for j in cursor4["token"]:
            cur.append(decoder(j))

        bot.send_message(message.chat.id,
                         "–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º, –∫–∞–∫–æ–π TOKEN –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö TOKEN:\n" + '\n'.join(cur),
                         parse_mode="html", reply_markup=types.ReplyKeyboardRemove())

        bot.register_next_step_handler(message, process_step_5)
    else:
        bot.send_message(message.chat.id, '–°—Ç—Ä–∞–Ω–Ω–æ, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç...', parse_mode="html",
                         reply_markup=types.ReplyKeyboardRemove())


def process_step_2(message):
    cursor3 = db.token.find_one({"id": encoder(str(message.chat.id))})
    cur = []
    cursor4 = dict(cursor3)
    for j in cursor4["token"]:
        cur.append(decoder(j))

    if message.text in cur:
        bot.send_message(message.chat.id,
                         "–î–∞–Ω–Ω—ã–π TOKEN —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                         parse_mode="html",
                         reply_markup=types.ReplyKeyboardRemove())
    else:
        cur.append(message.text)
        db.token.find_one_and_update({"id": encoder(str(message.chat.id))}, {'$set': {"token": encoder(cur)}})
        bot.send_message(message.chat.id,
                         "–í–∞—à TOKEN –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö üéâ",
                         parse_mode="html",
                         reply_markup=types.ReplyKeyboardRemove())

        try:
            gl = Gitlab('https://git.iu7.bmstu.ru/', private_token=message.text)
            gl.auth()
            username = gl.user.username
            db.token.find_one_and_update({"id": encoder(str(message.chat.id)), "token": encoder(cur)},
                                         {'$set': {"idGitLab": encoder(username)}})

        except gitlab.GitlabAuthenticationError:
            st4 = open('./static/access_denied.webp', 'rb')
            bot.send_sticker(message.chat.id, st4)

            bot.send_message(message.chat.id,
                             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ GitLab. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞",
                             parse_mode="html", reply_markup=types.ReplyKeyboardRemove())


def process_step_4(message):
    cursor3 = db.token.find_one({"id": encoder(str(message.chat.id))})
    cur = []
    cursor4 = dict(cursor3)
    for j in cursor4["token"]:
        cur.append(decoder(j))

    if message.text in cur:
        try:
            gl = Gitlab('https://git.iu7.bmstu.ru/', private_token=message.text)
            gl.auth()
            username = gl.user.username
            db.token.find_one_and_update({"id": encoder(str(message.chat.id)), "token": encoder(cur)},
                                         {'$set': {"idGitLab": encoder(username)}})

        except gitlab.GitlabAuthenticationError:
            st = open('./static/access_denied.webp', 'rb')
            bot.send_sticker(message.chat.id, st)

            bot.send_message(message.chat.id,
                             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ GitLab. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞",
                             parse_mode="html", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id,
                         "–¢–∞–∫–æ–≥–æ TOKEN –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ...",
                         parse_mode="html", reply_markup=types.ReplyKeyboardRemove())


def process_step_5(message):
    if message.chat.username is None:
        name_user = str(message.chat.id)
    else:
        name_user = "@" + message.chat.username

    cursor3 = db.token.find_one({"id": encoder(str(message.chat.id))})
    cur = []
    cursor4 = dict(cursor3)
    for j in cursor4["token"]:
        cur.append(decoder(j))

    if message.text in cur:
        for j, i in enumerate(cur):
            if message.text == i:
                cur.pop(j)

        db.token.find_one_and_update({"id": encoder(str(message.chat.id))},
                                     {'$set': {"token": encoder(cur)}})

        bot.send_message(message.chat.id,
                         "–í–∞—à TOKEN ( " + message.text + " ) –±—ã–ª —É–¥–∞—á–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                         parse_mode="html")

        if len(cur) != 0:
            item3 = types.KeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ TOKEN")
            markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup1.add(item3)

            bot.send_message(message.chat.id,
                             "–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–¥–∞–ª–∏—Ç—å –µ—â–µ TOKEN. –ï—Å–ª–∏ –Ω–∞–¥–æ, –∂–º–∏ –∫–Ω–æ–ø–æ—á–∫—É",
                             parse_mode="html", reply_markup=markup1)

            bot.register_next_step_handler(message, process_step_1)
        else:
            bot.send_message(message.chat.id,
                             name_user + ", —Ç—ã —É–¥–∞–ª–∏–ª –≤—Å–µ TOKEN",
                             parse_mode="html",
                             reply_markup=types.ReplyKeyboardRemove())

    else:
        bot.send_message(message.chat.id,
                         "–¢–∞–∫–æ–≥–æ TOKEN –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ...",
                         parse_mode="html", reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['problem'])
def send_problem(message):
    st = open('./static/problem.webp', 'rb')
    bot.send_sticker(message.chat.id, st)

    bot.send_message(message.chat.id,
                     "–¢—ã —É–≤–µ—Ä–µ–Ω??? –ï—Å–ª–∏ —Ç—ã –Ω–∞—à–µ–ª –æ—à–∏–±–∫—É... –ø—Ä–æ—Å—Ç–∏ –Ω–∞—Å üò•", parse_mode="html")

    bot.send_message(message.chat.id,
                     "–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –µ–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ üò¨\n",
                     parse_mode="html", reply_markup=types.ReplyKeyboardRemove())

    bot.register_next_step_handler(message, process_step_3)


def process_step_3(message):
    if message.chat.username is None:
        name_user = str(message.chat.id)
    else:
        name_user = "@" + message.chat.username

    bot.send_message('538587223',
                     "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + name_user + "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + message.text,
                     parse_mode="html")


@bot.message_handler(commands=['help'])
def send_instruction(message):
    st = open('./static/instruction_2.0.webp', 'rb')
    bot.send_sticker(message.chat.id, st)

    bot.send_message(message.chat.id,
                     "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≤–µ—Ä—Å–∏–µ–π "
                     "GitLab v12.10.2(–∏–º–µ–Ω–Ω–æ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –≥–∏—Ç–µ –∫–∞—Ñ–µ–¥—Ä—ã).\n"
                     "–°–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.",
                     parse_mode="html")

    bot.send_message(message.chat.id,
                     "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:",
                     parse_mode="html")

    bot.send_message(message.chat.id,
                     "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ "
                     "(–ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è - AcessTokens,"
                     "–±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)",
                     parse_mode="html")

    bot.send_message(message.chat.id,
                     "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥—è—â–∏—Ö Merge –Ω—É–∂–Ω–æ:",
                     parse_mode="html")

    bot.send_message(message.chat.id,
                     "–ï—Å–ª–∏ –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –∑–∞–π—Ç–∏ –≤ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -> "
                     "Webhooks –∏ –≤ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞ URL –≤–ø–∏—Å–∞—Ç—å –Ω–∞—à –∞–¥—Ä–µ—Å: http://64.227.126.203:443.",
                     parse_mode="html")

    bot.send_message(message.chat.id,
                     "–í–Ω–∏–º–∞–Ω–∏–µ ‚ÄºÔ∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω—è—Ç—å ‚úÖ —Å –ø—É–Ω–∫—Ç–∞ SSL –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. "
                     "–ï—Å–ª–∏ –∂–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–∞–º –Ω–µ –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç, —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –µ–≥–æ –º—ç–π–Ω—Ç–µ–π–Ω–µ—Ä—É.",
                     parse_mode="html")


@bot.message_handler(content_types=['text'])
def answer(message):
    bot.send_message(message.chat.id,
                     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –º–Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç—å üòì\n–ù–∞–ø–∏—à–∏ / , —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                     parse_mode="html")
